@page "/"
@rendermode RenderMode.InteractiveServer
@inject IFileService _fileService;

<PageTitle>Upload File</PageTitle>

<EditForm Model="@_data">
  <DataAnnotationsValidator />
  <div class="form">
  <form class="form-main">
    <div class="form-group">
      <h1 class="h">Fill the form</h1>
      
      <fieldset>
      <InputText class="form-control" id="Email" placeholder="Email" @bind-Value="@_data.Email"/>
        <ValidationMessage For="@(() => _data.Email)"/>
      </fieldset>

      <fieldset>
        <InputFile class="btn btn-success" id="File" OnChange="OnInputFileChange" accept=".docx"/>
        <ValidationMessage For="@(() => _data.File)" />
      </fieldset>
    </div>

    <button type="button" class="btn btn-primary" id="Button" @onclick="Submit" disabled="@(!context.Validate() || !context.IsModified())">Submit</button>
    <i class="notification" style="color: @_notificationColor">@_status</i>
  </form>
  </div>
</EditForm>

@code {
    InputDataModel _data = new InputDataModel();
    string _status;
    string _notificationColor;

    private async void Submit()
    {
        _status = await _fileService.UploadFileAsync(_data.File, _data.Email);
        _notificationColor = _status == "File has uploaded successfully!" ? "green" : "red";
        StateHasChanged();
    }

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        _data.File = e.File;
    }
}